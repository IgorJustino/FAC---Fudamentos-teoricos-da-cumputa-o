XOR
O Joao e um aluno que esta realizado ao juntar duas de suas paixoes: os computadores e a logica. Ele iniciou recentemente os estudos de programacao e o assunto nao sai de sua cabeca. Recentemente, o Joao estava revendo mentalmente os conceitos fundamentais da programacao e lembrando de conceitos mais avancados de logica, ele notou um detalhe…

O ou exclusivo e uma operacao logica muito semelhante ao OU tradicional, mas possui uma diferenca: e falso quando os dois operandos sao verdadeiros. A seguir esta a tabela verdade para o XOR:

A B A XOR B
V V F
V F V
F V V
F F F
Joao estava aprendendo a linguagem de programacao C, ele lembrava que o E (AND) possuia o operador tradicional && e a sua versao bit-a-bit (bitwise) &. Mas nao conseguia lembrar o operador logico do XOR. Ele nem sabia se o operador existia ou nao… Ele sabia que uma versao bit-a-bit do XOR nao funcionaria para ele! Neste exercicio, voce precisa combinar os operadores, instrucoes condicionais e de repeticao que precisar para produzir um programa que produza o resultado da operacao XOR para quantas vezes o usuario desejar (mas, com certeza, menos de 50)…

Entrada
A entrada deve ser lida da entrada padrao e possui o seguinte formato: a primeira linha da entrada contem um unico inteiro N, indicando o numero de operacoes a serem calculadas. As proximas N linhas contem dois numeros inteiros X Y, separados por espaco, que podem ser 1 (falso) ou 2 (verdadeiro).

Saida
A saida e composta por N linhas, indicando o resultado da operacao XOR lida anteriormente: 1 se for falso, 2 se for verdadeiro.

Restricoes
1 ≤ N < 50
X e Y = 1 ou 2

.data
newline: .asciiz "\n"
buffer: .space 32
results: .space 200

.text
.globl main

main:
    li $v0, 5
    syscall
    move $t0, $v0

    li $t1, 0
    la $t8, results

read_operations:
    bge $t1, $t0, print_results

    li $v0, 8
    la $a0, buffer
    li $a1, 32
    syscall

    la $t2, buffer
    lb $t3, 0($t2)
    sub $t3, $t3, 48

    li $t4, 32
loop_skip_space:
    addi $t2, $t2, 1
    lb $t5, 0($t2)
    bne $t5, $t4, skip_space_found
    j loop_skip_space

skip_space_found:
    lb $t6, 0($t2)
    sub $t6, $t6, 48

    xor $t7, $t3, $t6
    beqz $t7, false_case
    li $t7, 2
    j store_result
false_case:
    li $t7, 1
store_result:
    sb $t7, 0($t8)
    addi $t8, $t8, 1
    addi $t1, $t1, 1
    j read_operations

print_results:
    la $t8, results
    li $t1, 0

print_loop:
    bge $t1, $t0, end

    lb $t7, 0($t8)
    move $a0, $t7
    li $v0, 1
    syscall

    li $v0, 4
    la $a0, newline
    syscall

    addi $t8, $t8, 1
    addi $t1, $t1, 1
    j print_loop

end:
    li $v0, 10
    syscall
